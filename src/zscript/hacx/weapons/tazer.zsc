/**
 * HacX 2.0 - ZScript
 *
 * Weapon: Tazer
 */

class HacxTazer : HacxWeapon replaces Shotgun
{
  Default
  {
    Weapon.SelectionOrder 1300;
    Weapon.UpSound "weapons/tazerup";
    Weapon.AmmoUse 1;
    Weapon.AmmoGive 8;
    weapon.ammotype "HacxCartridges";
    inventory.pickupmessage "$GOTTAZER";
    obituary "$OB_MPTAZER";
    Tag "$TAG_TAZER";
  }

  States
  {
    Spawn:
      TAZR A -1;
      Stop;
    Idle:
      TAZG A 0;
      Goto IdleWait;
    Ready:
      TAZG A 1 A_WeaponReady();
      loop;
    Deselect:
      TAZG A 0 A_Lower();
      TAZG A 1 A_Lower();
      loop;
    Select:
      TAZG A 0 A_Raise();
      TAZG A 1 A_Raise();
      loop;
    Fire:
      TAZG A 3 X_TazerFlash();
      TAZF A 3 bright X_TazerFire();
      TAZF B 2 bright;
      TAZG C 2;
      TAZG D 3;
      TAZG E 5;
      TAZG D 4;
      TAZG C 3;
      TAZG A 4;
      TAZG A 1 A_ReFire();
      goto Ready;
    Flash:
      TAZC A 2 bright;
      TAZC B 2 bright A_Light1();
      TAZC C 2 bright A_Light2();
      TNT1 A 2;
      TNT1 A 0 A_Light0();
      stop;
    AltFire:
      TAZK A 0;
      Goto Kick;
  }

  action void X_TazerFlash()
  {
    A_PlaySound("weapons/tazercharge");
    A_GunFlash();
  }

  action void X_TazerFire()
  {
    A_PlaySound("weapons/tazerfire", CHAN_WEAPON);
    A_FireBullets(2, 0, 1, 20, "HacxTazerPuff");
  }
}

class HacxTazerPuff : HacxPuff
{
  Default
  {
    Decal "TazerScorch";
    Renderstyle "Add";
    VSpeed 0;
    Alpha 1.0;
    +PUFFONACTORS;
    +PUFFGETSOWNER;
  }

  States
  {
    Spawn:
      TPUF A 3 bright nodelay A_PlaySound("weapons/tazerpuff");
      TPUF B 3 bright;
      TPUF C 3 bright X_TazerZap(20, 96, 3, "HacxTazerZap", "HacxTazerTrail", 8);
      TPUF DEF 3 bright;
      stop;
  }

  //
  // X_TazerZap
  //
  void X_TazerZap(int damage, float radius, int maxvictims, class<Actor> pufftype, class<Actor> trailtype, float trailstep)
  {
    float dist;
    int hits = 0;

    // [XA] TODO: hit closest victims

    // check for nearby candidate victims
    for(let it = BlockThingsIterator.Create(self, radius); it.Next();) {
      dist = Max(0, radius - it.thing.radius);

      // check to see if this is a valid victim (a shootable target
      // within range). exclude the originator, naturally.
      if(dist <= radius
      && it.thing != self.target
      && it.thing.bShootable
      && self.CheckSight(it.thing)) {

        // hit! deal some damage.
        it.thing.DamageMobj(self, self.target, damage * random(1, 3), self.DamageType);
        X_TazerTrail(it.thing, pufftype, trailtype, trailstep);
        hits++;

        // stop if we've hit the max victim count.
        if(hits >= maxvictims) {
          break;
        }
      }
    }

    // happy zappy success sound
    if(hits > 0) {
      A_PlaySound("weapons/tazerzap", CHAN_AUTO);
    }
  }

  //
  // X_TazerTrail
  //
  void X_TazerTrail(Actor other, class<Actor> pufftype, class<Actor> trailtype, float trailstep)
  {
    if(!other) {
      return;
    }

    Vector3 trailStart = self.pos;
    Vector3 trailEnd = (other.pos.x, other.pos.y, other.pos.z + (other.height / 2));

    double ang = self.AngleTo(other, true);
    Vector3 curr = trailStart;
    Vector3 dist = LevelLocals.vec3Diff(self.pos, trailEnd);

    int numSteps = ceil(dist.Length() / trailstep);
    Vector3 step = dist.Unit() * trailstep;

    double maxDriftX = 20.0;
    double maxDriftY = 20.0;
    double driftStep = 4.0;
    Vector2 drift = (0, 0);

    for(int i = 0; i < numSteps; i++) {
      drift.x = clamp(-maxDriftX, drift.x + frandom(-driftStep, driftStep), maxDriftX);
      drift.y = clamp(-maxDriftY, drift.y + frandom(-driftStep, driftStep), maxDriftY);
      Vector3 spawnPos = (
        curr.x + (drift.x *  sin(ang)),
        curr.y + (drift.x * -cos(ang)),
        curr.z +  drift.y
      );
      Actor.Spawn(trailtype, spawnPos);
      curr += step;
    }

    Actor.Spawn(pufftype, curr);
  }
}

class HacxTazerTrail : HacxTrail
{
  Default
  {
    Alpha 1;
    Renderstyle "Add";
  }

  States
  {
    Spawn:
      TTRL A 1 bright nodelay A_Jump(128, "SpawnAlt");
      TTRL BCDEF 1 bright A_FadeOut(0.10);
      Stop;
    SpawnAlt:
      TTRL G 1 bright;
      TTRL HIJKL 1 bright A_FadeOut(0.10);
      Stop;
  }
}

class HacxTazerZap : HacxTazerPuff
{
  States
  {
    Spawn:
      TZAP ABCDE 3 bright;
      stop;
  }
}
